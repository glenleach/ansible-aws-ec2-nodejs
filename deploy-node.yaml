---
- name: Create group and user for node app
  hosts: aws_ec2
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - vars.yaml
  pre_tasks:
    - name: Ensure python3 is installed
      raw: sudo apt-get update && sudo apt-get install -y python3
      register: install_python
      changed_when: install_python.rc == 0
      failed_when: install_python.rc != 0 and install_python.rc != 100
  tasks:
    - name: Create group for nodejs-user
      group:
        name: nodejs-user
    - name: Create linux user for node app
      user:
        name: nodejs-user
        comment: nodejs-user Admin
        group: nodejs-user
        groups: sudo
    - name: Reset SSH connection to apply new user/group changes
      ansible.builtin.meta: reset_connection

- name: Prepare EC2 instance for Node.js app
  hosts: aws_ec2
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - vars.yaml
  tasks:
    - name: Update apt repo and cache
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600
    - name: Add NodeSource APT repository for Node.js 18.x
      shell: curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    - name: Install nodejs (includes npm)
      apt:
        name: nodejs
        state: present
    - name: Ensure app directory exists
      file:
        path: /home/nodejs-user/app
        state: directory
        owner: nodejs-user
        group: nodejs-user
        mode: '0755'

- name: Deploy nodejs app
  hosts: aws_ec2
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - vars.yaml
  tasks:
    - name: Remove old app directory before deployment
      file:
        path: /home/nodejs-user/app
        state: absent
      become: true

    - name: Recreate app directory for deployment
      file:
        path: /home/nodejs-user/app
        state: directory
        owner: nodejs-user
        group: nodejs-user
        mode: '0755'
      become: true

    - name: Unpack the nodejs file
      unarchive:
        src: "nodejs-app-{{ nodejs_app_version }}.tgz"
        dest: /home/nodejs-user/app
        owner: nodejs-user
        group: nodejs-user
        extra_opts: [--strip-components=1]
      become: true

    - name: Install dependencies as root
      shell: npm install
      args:
        chdir: /home/nodejs-user/app
      environment:
        HOME: /home/nodejs-user

    - name: Ensure app files are owned by nodejs-user
      file:
        path: /home/nodejs-user/app
        state: directory
        recurse: yes
        owner: nodejs-user
        group: nodejs-user

    - name: Restart Node.js app service
      systemd:
        name: nodejs-app
        state: restarted
        enabled: yes
      become: true

    - name: Create systemd service for Node.js app
      copy:
        dest: /etc/systemd/system/nodejs-app.service
        content: |
          [Unit]
          Description=Node.js App
          After=network.target

          [Service]
          Type=simple
          User=nodejs-user
          WorkingDirectory=/home/nodejs-user/app
          ExecStart=/usr/bin/npm start
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
      become: true

    - name: Reload systemd
      systemd:
        daemon_reload: yes
      become: true

    - name: Start and enable Node.js app service
      systemd:
        name: nodejs-app
        state: started
        enabled: yes
      become: true

    - name: Ensure app is running
      shell: ps aux | grep node
      register: app_status

    - debug:
        msg: "{{ app_status.stdout_lines }}"

    - name: Update hosts file with all EC2 public DNS entries
      ansible.builtin.blockinfile:
        path: "{{ hosts_file | default('hosts') }}"
        block: |
          [aws_ec2]
          {% for host in groups['aws_ec2'] %}
          {{ hostvars[host]['ansible_host'] | default(host) }} ansible_python_interpreter={{ ansible_python_interpreter_path }}
          {% endfor %}

          [aws_ec2:vars]
          ansible_ssh_private_key_file={{ ansible_ssh_private_key_file_path }}
          ansible_user={{ ansible_ssh_user }}
        create: yes
        state: present
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
